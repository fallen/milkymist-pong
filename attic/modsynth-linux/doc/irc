<bengtsjolen> but if seb want to have that buffer in a specific memory region or so then it would have to be copied either way -
   or we have be able to generate smaller than a tick worth of audio directly to the target buffer
<bengtsjolen> that is certainly possible too
> ok, you are  a bit more advanced than I am :)
   http://github.com/lekernel/milkymist-democompo/blob/6b76fce01c674505607a8619e595f1fe1eb812e0/src/modsynth.h for the interface
> but you can modify it I guess
> for instance we may pass the special buffering memory in the init function
> so that we know where to buffer
<bengtsjolen> apparently we can produce less then the requested and just return how much we produced too - if that is correct we
   could just produce until the next tick less or equal to the number requested
<bengtsjolen> but this can of course be tuned with seb as well about how big chunks we want to work with

> yes. in the code I did, I produced only the amount of samples requested
> but I wasnot aware of the ticks...
> I guess my code is wrong now
<bengtsjolen> i'm not that far, just looked through load_file and the setup so far and that looks all good
> yes but load_file is the very easy part. what is difficult is the sequencing stuff
<bengtsjolen> it seems that you are always working on the 4 channels independently
> yes that is true
> I may have misunderstood something?
> the code may be completely wrong, so let me know. cant we work on both chans independently?
<bengtsjolen> the song just describes in which order patterns are played, and all channels are played from the same patterns, and
   from the same row/division in that pattern so the stepping through the pattern and through the song should be even in
   mod_context perhaps, current position in song and pattern and tick basically
<bengtsjolen> and then all channels process the command and note at the current position of the current pattern for each step it
   takes changing the state of the channel, and then the channel could go about producing audio according that state for each
   tick

> ok I see. so you would put all information related to position (pattern, step, tick) into mod_context
> and use the chan_state for audio production stuff?
<bengtsjolen> yes, also a jump command in one channel affects the position of all, all channels are at the same position in the
   same pattern always
> hum... I totally missed that point when reading the docs... plus I didnot use a tracker
> but it makes sens you are right, chans cannot be processed independently
> I mean their position are related
> only the audio production is independent
> the sample in fact
> but pattern, step, ticks are common

<bengtsjolen> yes it's like a playhead that has a position in the song
> you re right, I imagined 4 uncorrellated chans
<bengtsjolen> that would have been cool though :)
> hu yes actually ;) but very hard to use :)
<bengtsjolen> there are some sequencer that can be used like that actually
<bengtsjolen> that can have independent loop points per track at least
> ah ok
> one question. regarding repeating samples. they block the 4 channels?
> I mean if a track has a repeating sample
<bengtsjolen> it repeats until the next note on that track
> ok
<bengtsjolen> hmm noisetracker had a command to change loop points while a sample was playing but i guess that was a hidden
   easteregg or it would have been in these docs too

